
services:
  app:
    build: .
    ports:
      - 8000:8000
      - 5678:5678
    volumes:
      - .:/code
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload
    restart: always
    depends_on:
      - ollama
      - ollama-webui
      
  ollama:
    volumes:
      - ./ollama/ollama:/root/.ollama
    container_name: ollama
    pull_policy: always
    tty: true
    restart: unless-stopped
    image: ollama/ollama:0.5.7
    ports:
      - 7869:11434
    ulimits:
      memlock:
        soft: -1
        hard: -1
    environment:
      # - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_NUM_PARALLEL=1
      - OLLAMA_MAX_LOADED_MODELS=3
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: ollama-webui
    volumes:
      - ./ollama/ollama-webui:/app/backend/data
    depends_on:
      - ollama
    ports:
      - 8089:8080
    environment: # https://docs.openwebui.com/getting-started/env-configuration#default_models
      - OLLAMA_BASE_URLS=http://host.docker.internal:7869 #comma separated ollama hosts
      - ENV=dev
      - WEBUI_AUTH=False
      - WEBUI_NAME=valiantlynx AI
      - WEBUI_URL=http://localhost:8089
      - WEBUI_SECRET_KEY=t0p-s3cr3t
    extra_hosts:
      - host.docker.internal:host-gateway
    restart: unless-stopped
  zrok:
    image: openziti/zrok
    restart: unless-stopped
    user: "${USER_ID}" # expects USER_ID=`id -u` e.g. in .bashrc
    volumes:
      - ${HOME}/.zrok:/.zrok
    environment:
      HOME: "/"
      PFXLOG_NO_JSON: "true"
    command: share reserved "ollamamarc" --headless --override-endpoint http://ollama:11434
    # This command requires the Ziti Edge Controller to be running and the share be reserved on the host before: `zrok reserve public http://vista:5000 --basic-auth lcas:lincoln -n vista`
    links:
      - ollama


  anythingllm:
    image: mintplexlabs/anythingllm@sha256:a4a0ca494394640c294cbaf9b3dc39f8aca783adcc82a5657d640161a3b7faf3
    container_name: anythingllm
    environment:
      - STORAGE_DIR=/app/server/storage
      - LLM_PROVIDER=ollama
      - OLLAMA_BASE_PATH=http://ollama:11434
      - OLLAMA_MODEL_PREF=llama3:8b
      - OLLAMA_MODEL_TOKEN_LIMIT=8192
      - OLLAMA_PERFORMANCE_MODE=maximum

      - EMBEDDING_ENGINE=ollama
      - EMBEDDING_BASE_PATH=http://ollama:11434
      - EMBEDDING_MODEL_PREF=nomic-embed-text:latest
      - EMBEDDING_MODEL_MAX_CHUNK_LENGTH=512

      - DISABLE_TELEMETRY=true

      # - AGENT_GSE_CTX= see .anythingllm.env
      # - AGENT_GSE_KEY= see .anythingllm.env
      # - JWT_SECRET= see .anythingllm.env

      - VECTOR_DB=lancedb
    env_file:
      - anythingllm.env
    cap_add:
      - SYS_ADMIN
    volumes:
      - ./anythingllm-data/storage:/app/server/storage
    restart: unless-stopped
    links:
      - ollama

  zrok_anythingllm:
    image: openziti/zrok
    restart: unless-stopped
    user: "${USER_ID}" # expects USER_ID=`id -u` e.g. in .bashrc
    volumes:
      - ${HOME}/.zrok:/.zrok
    environment:
      HOME: "/"
      PFXLOG_NO_JSON: "true"
    command: share reserved "anythingllm" --headless --override-endpoint http://anythingllm:3001
    # This command requires the Ziti Edge Controller to be running and the share be reserved on the host before: `zrok reserve public http://vista:5000 --basic-auth lcas:lincoln -n vista`
    links:
      - anythingllm

  mcp_file_system:
    build:
      context: ./mcp-proxy
      dockerfile: ./Dockerfile
    #tty: true
    restart: unless-stopped
    command: 
      - mcp-proxy
      - "--sse-host"
      - "0.0.0.0"
      - "--sse-port"
      - "8888"
      - -e
      - PATH
      - "/app/.venv/bin:/usr/local/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      - --
      - /usr/local/bin/npx
      - -y
      - "@modelcontextprotocol/server-filesystem"
      - /filesystem
    #command: "mcp-proxy --sse-port=8080 -- uvx mcp-server-fetch --user-agent=YourUserAgent"
    #command: "mcp-proxy  --sse-port 8888 -- /usr/local/bin/npx -y @modelcontextprotocol/server-filesystem /filesystem"
    #command: "mcp-proxy  --sse-port 8888 /usr/local/bin/npx -y @modelcontextprotocol/server-filesystem /filesystem"
    volumes:
      - ./mcp-proxy/data:/filesystem

